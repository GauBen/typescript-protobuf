// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file chat.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: string author = 1;
   */
  author = "";

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(
    a: Message | PlainMessage<Message> | undefined,
    b: Message | PlainMessage<Message> | undefined
  ): boolean {
    return proto3.util.equals(Message, a, b);
  }
}
